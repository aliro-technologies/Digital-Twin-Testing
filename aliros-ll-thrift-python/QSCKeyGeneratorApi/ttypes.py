#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import alirosll.ttypes

from thrift.transport import TTransport
all_structs = []


class StartKeyGenerationRequest(object):
    """
    Attributes:
     - remoteHardwareId
     - remoteL2Address
     - remoteNodeId
     - bellBasisState

    """


    def __init__(self, remoteHardwareId=None, remoteL2Address=None, remoteNodeId=None, bellBasisState=None,):
        self.remoteHardwareId = remoteHardwareId
        self.remoteL2Address = remoteL2Address
        self.remoteNodeId = remoteNodeId
        self.bellBasisState = bellBasisState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.remoteHardwareId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.remoteL2Address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.remoteNodeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.bellBasisState = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StartKeyGenerationRequest')
        if self.remoteHardwareId is not None:
            oprot.writeFieldBegin('remoteHardwareId', TType.STRING, 1)
            oprot.writeString(self.remoteHardwareId.encode('utf-8') if sys.version_info[0] == 2 else self.remoteHardwareId)
            oprot.writeFieldEnd()
        if self.remoteL2Address is not None:
            oprot.writeFieldBegin('remoteL2Address', TType.STRING, 2)
            oprot.writeString(self.remoteL2Address.encode('utf-8') if sys.version_info[0] == 2 else self.remoteL2Address)
            oprot.writeFieldEnd()
        if self.remoteNodeId is not None:
            oprot.writeFieldBegin('remoteNodeId', TType.STRING, 3)
            oprot.writeString(self.remoteNodeId.encode('utf-8') if sys.version_info[0] == 2 else self.remoteNodeId)
            oprot.writeFieldEnd()
        if self.bellBasisState is not None:
            oprot.writeFieldBegin('bellBasisState', TType.I32, 4)
            oprot.writeI32(self.bellBasisState)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StartKeyGenerationReply(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.status = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StartKeyGenerationReply')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 1)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StopKeyGenerationReply(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.status = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StopKeyGenerationReply')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 1)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetL2AddressReply(object):
    """
    Attributes:
     - status
     - L2Address

    """


    def __init__(self, status=None, L2Address=None,):
        self.status = status
        self.L2Address = L2Address

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.status = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.L2Address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetL2AddressReply')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 1)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        if self.L2Address is not None:
            oprot.writeFieldBegin('L2Address', TType.STRING, 2)
            oprot.writeString(self.L2Address.encode('utf-8') if sys.version_info[0] == 2 else self.L2Address)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(StartKeyGenerationRequest)
StartKeyGenerationRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'remoteHardwareId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'remoteL2Address', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'remoteNodeId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'bellBasisState', None, None, ),  # 4
)
all_structs.append(StartKeyGenerationReply)
StartKeyGenerationReply.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'status', None, None, ),  # 1
)
all_structs.append(StopKeyGenerationReply)
StopKeyGenerationReply.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'status', None, None, ),  # 1
)
all_structs.append(GetL2AddressReply)
GetL2AddressReply.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'status', None, None, ),  # 1
    (2, TType.STRING, 'L2Address', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
