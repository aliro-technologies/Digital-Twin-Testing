#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ReqStatus(object):
    SUCCESS = 0
    ERROR = 1
    NODE_NOT_FOUND = 2
    TIMED_OUT = 3
    DEVICE_NOT_FOUND = 4
    DEVICE_IS_DOWN = 5
    DEVICE_NOT_MEASURING = 6
    OPERATION_NOT_VALID = 7
    MESSAGE_TOO_LONG = 8
    UNSUPPORTED = 9
    NO_HOST_FOUND = 10
    SESSION_NOT_FOUND = 11
    INVALID_STATE = 12
    UNEXPECTED_ERROR = 13
    REJECTED = 14
    CLOSED = 15
    PROPERTY_NOT_FOUND = 16
    INVALID_VALUE = 17
    TYPE_CONVERSION_ERROR = 18
    NOT_IN_RANGE = 19

    _VALUES_TO_NAMES = {
        0: "SUCCESS",
        1: "ERROR",
        2: "NODE_NOT_FOUND",
        3: "TIMED_OUT",
        4: "DEVICE_NOT_FOUND",
        5: "DEVICE_IS_DOWN",
        6: "DEVICE_NOT_MEASURING",
        7: "OPERATION_NOT_VALID",
        8: "MESSAGE_TOO_LONG",
        9: "UNSUPPORTED",
        10: "NO_HOST_FOUND",
        11: "SESSION_NOT_FOUND",
        12: "INVALID_STATE",
        13: "UNEXPECTED_ERROR",
        14: "REJECTED",
        15: "CLOSED",
        16: "PROPERTY_NOT_FOUND",
        17: "INVALID_VALUE",
        18: "TYPE_CONVERSION_ERROR",
        19: "NOT_IN_RANGE",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 0,
        "ERROR": 1,
        "NODE_NOT_FOUND": 2,
        "TIMED_OUT": 3,
        "DEVICE_NOT_FOUND": 4,
        "DEVICE_IS_DOWN": 5,
        "DEVICE_NOT_MEASURING": 6,
        "OPERATION_NOT_VALID": 7,
        "MESSAGE_TOO_LONG": 8,
        "UNSUPPORTED": 9,
        "NO_HOST_FOUND": 10,
        "SESSION_NOT_FOUND": 11,
        "INVALID_STATE": 12,
        "UNEXPECTED_ERROR": 13,
        "REJECTED": 14,
        "CLOSED": 15,
        "PROPERTY_NOT_FOUND": 16,
        "INVALID_VALUE": 17,
        "TYPE_CONVERSION_ERROR": 18,
        "NOT_IN_RANGE": 19,
    }


class BellBasisState(object):
    phiPlus = 0
    phiMinus = 1
    psiPlus = 2
    psiMinus = 3

    _VALUES_TO_NAMES = {
        0: "phiPlus",
        1: "phiMinus",
        2: "psiPlus",
        3: "psiMinus",
    }

    _NAMES_TO_VALUES = {
        "phiPlus": 0,
        "phiMinus": 1,
        "psiPlus": 2,
        "psiMinus": 3,
    }


class LogDevProp(object):
    """
    Attributes:
     - name
     - defaultValue
     - minValue
     - maxValue
     - type
     - value

    """


    def __init__(self, name=None, defaultValue=None, minValue=None, maxValue=None, type=None, value=None,):
        self.name = name
        self.defaultValue = defaultValue
        self.minValue = minValue
        self.maxValue = maxValue
        self.type = type
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.defaultValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.minValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.maxValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LogDevProp')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.defaultValue is not None:
            oprot.writeFieldBegin('defaultValue', TType.STRING, 2)
            oprot.writeString(self.defaultValue.encode('utf-8') if sys.version_info[0] == 2 else self.defaultValue)
            oprot.writeFieldEnd()
        if self.minValue is not None:
            oprot.writeFieldBegin('minValue', TType.STRING, 3)
            oprot.writeString(self.minValue.encode('utf-8') if sys.version_info[0] == 2 else self.minValue)
            oprot.writeFieldEnd()
        if self.maxValue is not None:
            oprot.writeFieldBegin('maxValue', TType.STRING, 4)
            oprot.writeString(self.maxValue.encode('utf-8') if sys.version_info[0] == 2 else self.maxValue)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 5)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 6)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SetLLLogDevPropertyReply(object):
    """
    Attributes:
     - status

    """


    def __init__(self, status=None,):
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.status = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetLLLogDevPropertyReply')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 1)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetLLLogDevPropertyReply(object):
    """
    Attributes:
     - status
     - property

    """


    def __init__(self, status=None, property=None,):
        self.status = status
        self.property = property

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.status = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.property = LogDevProp()
                    self.property.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetLLLogDevPropertyReply')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I16, 1)
            oprot.writeI16(self.status)
            oprot.writeFieldEnd()
        if self.property is not None:
            oprot.writeFieldBegin('property', TType.STRUCT, 2)
            self.property.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LogDevProp)
LogDevProp.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'defaultValue', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'minValue', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'maxValue', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'type', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'value', 'UTF8', None, ),  # 6
)
all_structs.append(SetLLLogDevPropertyReply)
SetLLLogDevPropertyReply.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'status', None, None, ),  # 1
)
all_structs.append(GetLLLogDevPropertyReply)
GetLLLogDevPropertyReply.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'status', None, None, ),  # 1
    (2, TType.STRUCT, 'property', [LogDevProp, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
